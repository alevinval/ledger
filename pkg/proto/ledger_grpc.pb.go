// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// LedgerClient is the client API for Ledger service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LedgerClient interface {
	// Reader
	Read(ctx context.Context, in *ReadRequest, opts ...grpc.CallOption) (Ledger_ReadClient, error)
	Commit(ctx context.Context, in *CommitRequest, opts ...grpc.CallOption) (*CommitResponse, error)
	// Writer
	Write(ctx context.Context, in *WriteRequest, opts ...grpc.CallOption) (*WriteResponse, error)
	CloseWriter(ctx context.Context, in *WriterCloseRequest, opts ...grpc.CallOption) (*WriterCloseResponse, error)
	CloseReader(ctx context.Context, in *ReaderCloseRequest, opts ...grpc.CallOption) (*ReaderCloseResponse, error)
}

type ledgerClient struct {
	cc grpc.ClientConnInterface
}

func NewLedgerClient(cc grpc.ClientConnInterface) LedgerClient {
	return &ledgerClient{cc}
}

func (c *ledgerClient) Read(ctx context.Context, in *ReadRequest, opts ...grpc.CallOption) (Ledger_ReadClient, error) {
	stream, err := c.cc.NewStream(ctx, &Ledger_ServiceDesc.Streams[0], "/Ledger/Read", opts...)
	if err != nil {
		return nil, err
	}
	x := &ledgerReadClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Ledger_ReadClient interface {
	Recv() (*Message, error)
	grpc.ClientStream
}

type ledgerReadClient struct {
	grpc.ClientStream
}

func (x *ledgerReadClient) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *ledgerClient) Commit(ctx context.Context, in *CommitRequest, opts ...grpc.CallOption) (*CommitResponse, error) {
	out := new(CommitResponse)
	err := c.cc.Invoke(ctx, "/Ledger/Commit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ledgerClient) Write(ctx context.Context, in *WriteRequest, opts ...grpc.CallOption) (*WriteResponse, error) {
	out := new(WriteResponse)
	err := c.cc.Invoke(ctx, "/Ledger/Write", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ledgerClient) CloseWriter(ctx context.Context, in *WriterCloseRequest, opts ...grpc.CallOption) (*WriterCloseResponse, error) {
	out := new(WriterCloseResponse)
	err := c.cc.Invoke(ctx, "/Ledger/CloseWriter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ledgerClient) CloseReader(ctx context.Context, in *ReaderCloseRequest, opts ...grpc.CallOption) (*ReaderCloseResponse, error) {
	out := new(ReaderCloseResponse)
	err := c.cc.Invoke(ctx, "/Ledger/CloseReader", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LedgerServer is the server API for Ledger service.
// All implementations must embed UnimplementedLedgerServer
// for forward compatibility
type LedgerServer interface {
	// Reader
	Read(*ReadRequest, Ledger_ReadServer) error
	Commit(context.Context, *CommitRequest) (*CommitResponse, error)
	// Writer
	Write(context.Context, *WriteRequest) (*WriteResponse, error)
	CloseWriter(context.Context, *WriterCloseRequest) (*WriterCloseResponse, error)
	CloseReader(context.Context, *ReaderCloseRequest) (*ReaderCloseResponse, error)
	mustEmbedUnimplementedLedgerServer()
}

// UnimplementedLedgerServer must be embedded to have forward compatible implementations.
type UnimplementedLedgerServer struct {
}

func (UnimplementedLedgerServer) Read(*ReadRequest, Ledger_ReadServer) error {
	return status.Errorf(codes.Unimplemented, "method Read not implemented")
}
func (UnimplementedLedgerServer) Commit(context.Context, *CommitRequest) (*CommitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Commit not implemented")
}
func (UnimplementedLedgerServer) Write(context.Context, *WriteRequest) (*WriteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Write not implemented")
}
func (UnimplementedLedgerServer) CloseWriter(context.Context, *WriterCloseRequest) (*WriterCloseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CloseWriter not implemented")
}
func (UnimplementedLedgerServer) CloseReader(context.Context, *ReaderCloseRequest) (*ReaderCloseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CloseReader not implemented")
}
func (UnimplementedLedgerServer) mustEmbedUnimplementedLedgerServer() {}

// UnsafeLedgerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LedgerServer will
// result in compilation errors.
type UnsafeLedgerServer interface {
	mustEmbedUnimplementedLedgerServer()
}

func RegisterLedgerServer(s grpc.ServiceRegistrar, srv LedgerServer) {
	s.RegisterService(&Ledger_ServiceDesc, srv)
}

func _Ledger_Read_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ReadRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(LedgerServer).Read(m, &ledgerReadServer{stream})
}

type Ledger_ReadServer interface {
	Send(*Message) error
	grpc.ServerStream
}

type ledgerReadServer struct {
	grpc.ServerStream
}

func (x *ledgerReadServer) Send(m *Message) error {
	return x.ServerStream.SendMsg(m)
}

func _Ledger_Commit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LedgerServer).Commit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Ledger/Commit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LedgerServer).Commit(ctx, req.(*CommitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ledger_Write_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WriteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LedgerServer).Write(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Ledger/Write",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LedgerServer).Write(ctx, req.(*WriteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ledger_CloseWriter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WriterCloseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LedgerServer).CloseWriter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Ledger/CloseWriter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LedgerServer).CloseWriter(ctx, req.(*WriterCloseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ledger_CloseReader_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReaderCloseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LedgerServer).CloseReader(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Ledger/CloseReader",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LedgerServer).CloseReader(ctx, req.(*ReaderCloseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Ledger_ServiceDesc is the grpc.ServiceDesc for Ledger service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Ledger_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Ledger",
	HandlerType: (*LedgerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Commit",
			Handler:    _Ledger_Commit_Handler,
		},
		{
			MethodName: "Write",
			Handler:    _Ledger_Write_Handler,
		},
		{
			MethodName: "CloseWriter",
			Handler:    _Ledger_CloseWriter_Handler,
		},
		{
			MethodName: "CloseReader",
			Handler:    _Ledger_CloseReader_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Read",
			Handler:       _Ledger_Read_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "pkg/proto/ledger.proto",
}
